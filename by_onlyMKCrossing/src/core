//[0-1_備忘錄]
//標準進出場線由通用預設進出場函式執行
//其他額外出場線由專屬出場函式執行
//[1-1_傳入函數之參數]
input: _stdevSTAT(numericSimple);
input: _stdevUNSTAT(numericSimple);
input: _stdevUUNSTAT(numericSimple);

input: _stdMID(numericseries); 
input: _stdW(numericseries); 

input: _qc_line_L(numericseries); 
input: _qc_line_S(numericseries); 

input: _extremes_Line_Upper(numericseries); 
input: _extremes_Line_lower(numericseries);

input: _marketPrice_avg_RAW(numericseries);         //line for trend
input: _marketPrice_avg_addone_RAW(numericseries);  //line for CRP

input: _folio_POS_Line(numericREF);     //line for CRP
input: _folio_POS_LineRE(numericREF);   //line for CRPRe
input: _folio_POS_LineCLP(numericREF);  //line for CLP
input: _folio_POS_LineSTP(numericREF);  //line for STP

input: _qc_avg(numericREF);
input: _qc_stdw(numericREF);

input: _DEBUG_INFO(stringRef);

//[1-2_檢查傳入之核心參數]

//[1-3_local參數建立與重置]
array: _qc_array[](0);
variable: _len(0);
_len =intPortion(4.5*60/barInterval)*5; //for 早盤K棒數1week
array_SetMaxIndex(_qc_array, _len);

////早開盤檢查項目
variable: _myOPEND(0);
variable: _avg_count(0);
variable: _mkopd(0);
variable: _avg_mkopd(0);
if time =084500 then
begin
    //早盤1stK時歸零
    _myOPEND =open;
    _avg_count =0;
    _mkopd =0;

end else
begin
    _avg_count =_avg_count +1;
    _mkopd =_mkopd +(_marketPrice_avg_addone_RAW -_myOPEND);
    _avg_mkopd =_mkopd /_avg_count;
end;

variable: _time_filter(FALSE);
//策略使用之時段(早盤)
_time_filter =time <>084500;

//收集資料
variable: _qc_diff(0);
variable: _qc_counter(0);
if currentbar >1 
    and _time_filter then
begin
    //save diffvalue into arrayREF
    _qc_diff =iff(close[1] -open[1] >0, 
                    high[1] -open[1],
                    low[1]  -open[1]);
    reflash_Data("_Push_", _qc_array, _qc_diff);
	if _qc_counter <_len then _qc_counter +=1;
end;
//
variable: _U_STAT(0);
variable: _D_STAT(0);
variable: _U2_STAT(0);
variable: _D2_STAT(0);
variable: _U3_STAT(0);
variable: _D3_STAT(0);
_U_STAT =_stdMID + _stdW*_stdevSTAT;
_D_STAT =_stdMID - _stdW*_stdevSTAT;
_U2_STAT =_stdMID + _stdW*_stdevUNSTAT;
_D2_STAT =_stdMID - _stdW*_stdevUNSTAT;
_U3_STAT =_stdMID + _stdW*_stdevUUNSTAT;
_D3_STAT =_stdMID - _stdW*_stdevUUNSTAT;
//計算漲跌標差
variable: _qc_sum(0);
variable: _qc_diffq_sum(0);

variable: _range_L(0);
variable: _range_S(0);
variable: _range_LL(0);
variable: _range_SS(0);

variable: _folio_base(10);

variable: _LS_ratio(0);
variable: _mk_diff(0);
variable: _pool_long(FALSE);
variable: _pool_short(FALSE);
variable: _switch_L(FALSE);
variable: _switch_S(FALSE);
variable: _switch_DL(FALSE);
variable: _switch_DS(FALSE);
variable: _switch_mk_L(FALSE);
variable: _switch_mk_S(FALSE);
variable: _switch_mk_DL(FALSE);
variable: _switch_mk_DS(FALSE);
variable: _switch_opd_L(FALSE);
variable: _switch_opd_S(FALSE);
variable: _switch_Rev2L(FALSE);
variable: _switch_Rev2S(FALSE);
variable: _switch_Rev2DL(FALSE);
variable: _switch_Rev2DS(FALSE);

variable: intraBarPersist _time_CRP(0);

_qc_sum      =0;
_qc_diffq_sum=0;

if _qc_counter >=_len then //完成採樣數
begin
    
	///計算標準差
    for value1 =1 to _len
    begin
        _qc_sum =_qc_sum +_qc_array[value1];
    end;

    _qc_avg =_qc_sum /_len;
    
    for value1 =1 to _len
    begin
        _qc_diffq_sum =_qc_diffq_sum +square(_qc_array[value1] -_qc_avg);
    end;

    _qc_stdw = squareRoot(_qc_diffq_sum/_len);

    //大趨勢指標分析
	_mk_diff =_marketPrice_avg_RAW -_marketPrice_avg_addone_RAW;
	if _mk_diff =0 then
		_LS_ratio=_marketPrice_avg_RAW -_stdMID
	else _LS_ratio=_mk_diff;

	_pool_long =_marketPrice_avg_addone_RAW >_stdMID
				and _stdMID >_marketPrice_avg_RAW;
	_pool_short=_marketPrice_avg_addone_RAW <_stdMID
				and _stdMID <_marketPrice_avg_RAW;
	
    _range_L  =_qc_avg +_qc_stdw*_stdevSTAT;
    _range_LL =_qc_avg +_qc_stdw*_stdevUNSTAT;
    _range_S  =_qc_avg -_qc_stdw*_stdevSTAT;
    _range_SS =_qc_avg -_qc_stdw*_stdevUNSTAT;

	//[2-1_產生盤勢分析]
    _switch_L       =FALSE;
    _switch_S       =FALSE;
    _switch_DL      =FALSE;
    _switch_DS      =FALSE;
    _switch_mk_L    =FALSE;    
    _switch_mk_S    =FALSE;
	_switch_mk_DL	=FALSE;
	_switch_mk_DS	=FALSE;
    _switch_opd_L   =FALSE;
    _switch_opd_L   =FALSE;
	_switch_Rev2L   =FALSE;
	_switch_Rev2S   =FALSE;
	_switch_Rev2DL  =FALSE;
	_switch_Rev2DS  =FALSE;
	
	//產生判斷條件
    //當雙MK線重合
    if _mk_diff =0 then
    begin
        //K標差漲幅>基本利數
        if _range_L >_folio_base 
			and _LS_ratio >0 then
        begin
            //多穿越型
            _switch_L =_marketPrice_avg_addone_RAW -open <_range_L 
                        and open <_marketPrice_avg_addone_RAW
                        and high >=_marketPrice_avg_addone_RAW;
            //多急漲型
            _switch_DL=time <>084500
						and (_folio_POS_Line[1] <0
								or time[1] =084500)
						and close[1] -open[1] >0
						and low >_marketPrice_avg_addone_RAW
						and high <high[1];
        end;
		
		//多穿心型
		_switch_Rev2DL =_LS_ratio[1] <0
						and open[1] <_stdMID[1]
						and high[1] >=_stdMID[1]
						and time <>084500;
		
        //K標差跌幅>基本利數(以下因計算負數所以*-1並反寫)
        if _range_S <_folio_base*-1 
			and _LS_ratio <0 then
        begin
            //空穿越型
            _switch_S =_marketPrice_avg_addone_RAW -open >_range_S
                        and open >_marketPrice_avg_addone_RAW 
                        and low <=_marketPrice_avg_addone_RAW;
            //空急跌型
            _switch_DS=time <>084500
						and (_folio_POS_Line[1] >0
								or time[1] =084500)
						and close[1] -open[1] <0
						and high <_marketPrice_avg_addone_RAW
						and low <low[1];
        end;
		//空穿心型
		_switch_Rev2DS =_LS_ratio[1] >0
						and open[1] >_stdMID[1]
						and low[1] <=_stdMID[1]
						and time <>084500;
						
    end else
	//當雙MK線分開
    begin
        //K標差漲幅>基本利數
        if _range_L >_folio_base then
        begin
            
			if _LS_ratio >0 then
			begin
				//多穿越型
				_switch_mk_L  =_marketPrice_avg_addone_RAW -open <_range_L
									and open <_marketPrice_avg_addone_RAW 
									and high >=_marketPrice_avg_addone_RAW;
				//多穿心型					
				_switch_opd_L =_stdMID -open <_range_L
									and open <_stdMID 
									and high >=_stdMID;	
			end;
			
			//多急漲型
			_switch_mk_DL =_LS_ratio <0		
							and (_pool_long[1] 
									or _pool_long
									or time[1] =084500)
							and time<>084500
							and (NOT (_folio_POS_Line[1] >0)
										or time[1] =084500)
							and close[1] >open[1]
							and high >high[1]
									;
			//反轉多
			_switch_Rev2L =_LS_ratio <0		
							and (_pool_long[1] and _pool_long)
							and _folio_POS_Line[1] <0
							and open <_marketPrice_avg_addone_RAW 
							and high >=_marketPrice_avg_addone_RAW
									;


        end;

        //K標差跌幅>基本利數(以下因計算負數所以*-1並反寫)
        if _range_S <_folio_base*-1 then
        begin
            
            if _LS_ratio <0 then
			begin
				//空穿越型
				_switch_mk_S  =_marketPrice_avg_addone_RAW -open >_range_S
								and open >_marketPrice_avg_addone_RAW
								and low <=_marketPrice_avg_addone_RAW;
				//空穿心型				
				_switch_opd_S =_stdMID -open >_range_S
								and open >_stdMID
								and low <=_stdMID;
			end;
		
			//空急跌型
			_switch_mk_DS =_LS_ratio >0		
							and (_pool_short[1] 
									or _pool_short
									or time[1] =084500)
							and time<>084500
							and (NOT (_folio_POS_Line[1] <0)
									or time[1] =084500)
							and close[1] <open[1]
							and low <low[1]
									;
									
			//反轉空
			_switch_Rev2S =_LS_ratio >0		
							and (_pool_short[1] and _pool_short)
							and _folio_POS_Line[1] >0
							and open >_marketPrice_avg_addone_RAW
							and low <=_marketPrice_avg_addone_RAW;
        end;
		
    end;
	
	//[3-1_產生各進出場線]
    //當位於策略生效時段
	if _time_filter then
	begin
		//產生進場線
        //雙MK重合
        ////穿越型
		if _switch_L
			or _switch_S then
		begin
			_folio_POS_Line =p_n(_LS_ratio) *_marketPrice_avg_addone_RAW;
		end else
        ////急漲跌型
        if _switch_DL
            or _switch_DS then
        begin
            _folio_POS_Line =iff(_switch_DL, high[1], low[1]) *iff(_switch_DL, 1,-1);
        end;

		//穿心型.
        if _switch_Rev2DL
            or _switch_Rev2DS then
        begin
            _folio_POS_Line =iff(_switch_Rev2DL,1,-1) *iff(_switch_Rev2DL, 
															_extremes_Line_Upper,
															_extremes_Line_lower);
        end;
	
        //雙MK分開
        ////穿越型
        if (_switch_mk_L
				or _switch_mk_S) 
			and NOT (_pool_long[1]
					or _pool_short[1])then
        begin
            _folio_POS_Line =p_n(_LS_ratio) *_marketPrice_avg_addone_RAW;
        end;
        ////
        if _switch_opd_L
            or _switch_opd_S then
        begin
            _folio_POS_Line =_stdMID *iff(_switch_opd_L, 1,-1);
        end;
		
		////急漲跌型
        if _switch_mk_DL
            or _switch_mk_DS then
        begin
            _folio_POS_Line =iff(_switch_mk_DL, high[1], low[1]) *iff(_switch_mk_DL, 1,-1);
        end;
		
		//反轉型.
        if _switch_Rev2L
            or _switch_Rev2S then
        begin
            _folio_POS_Line =iff(_switch_Rev2L,1,-1) *_marketPrice_avg_addone_RAW;
        end;
		
        //於Kx產生出場線_folio_POS_LineCLP
		if _folio_POS_Line =_folio_POS_Line[1] then
		begin
			//當雙MK線重合
			if _mk_diff =0 then
			begin
				//多平
				if _folio_POS_Line >0
					and _U3_STAT >_folio_POS_Line
					and high[1] >_U3_STAT[1]
					and low <_U3_STAT then
				_folio_POS_LineCLP =_U3_STAT
				else 	
				//空平
				if _folio_POS_Line <0
					and _D3_STAT <absValue(_folio_POS_Line)
					and low[1] <_D3_STAT[1]
					and high >_D3_STAT then
				_folio_POS_LineCLP =_D3_STAT;
			end
			else
			//當雙MK線分開
			begin
				if( _folio_POS_Line >0
						and ((open <_marketPrice_avg_RAW
									and high >=_marketPrice_avg_RAW)
								or (high[1] >_marketPrice_avg_RAW[1]
									and low <=_marketPrice_avg_RAW))
									) 
					or
					( _folio_POS_Line <0
						and ((open >_marketPrice_avg_RAW
									and low <=_marketPrice_avg_RAW)
								or (low[1] <_marketPrice_avg_RAW[1]
									and high >=_marketPrice_avg_RAW))
								) then
					_folio_POS_LineCLP =_marketPrice_avg_RAW;
					
				if( _folio_POS_Line >0
						and open <_marketPrice_avg_addone_RAW
						and high >=_marketPrice_avg_addone_RAW) 
					or
					( _folio_POS_Line <0
						and open >_marketPrice_avg_addone_RAW
						and low <=_marketPrice_avg_addone_RAW) then
					_folio_POS_LineCLP =_marketPrice_avg_addone_RAW;
			end;
		end
		else 
		//新產生進場線
		begin
			_folio_POS_LineCLP 	=absValue(_folio_POS_Line);
			_folio_POS_LineRE	=absValue(_folio_POS_Line);
		end;
		
        ////產生平進循環線_folio_POS_LineRe
		if _folio_POS_Line =_folio_POS_Line[1] 
			and _folio_POS_LineCLP <>absValue(_folio_POS_Line) then
		begin
			if (_folio_POS_Line >0 
					and open <_folio_POS_LineCLP
					and high >=_folio_POS_LineCLP) 
				or 
				(_folio_POS_Line >0 
					and close <(absValue(_folio_POS_Line)+_qc_line_L)*0.5
					and (high >=_qc_line_L
						or high[1] >=_qc_line_L[1]))
				or 
				(_folio_POS_Line <0
					and open >_folio_POS_LineCLP
					and low <=_folio_POS_LineCLP) 
				or 
				(_folio_POS_Line <0
					and close >(absValue(_folio_POS_Line)+_qc_line_S)*0.5
					and (low <=_qc_line_S
						or low[1] <=_qc_line_S[1])) then
			begin
				_folio_POS_LineRE =iff(_folio_POS_Line >0,
									high[1],
									low[1]);
			end;
		end;
        //產生停損線_folio_POS_LineSTP
        ////如產生新的進場線
		variable: _stp_line(0);
		if _folio_POS_Line <>_folio_POS_Line[1] then 
		begin
			_stp_line =open +iff(_folio_POS_Line >0, _range_SS, _range_LL);
			_folio_POS_LineSTP =iff(_folio_POS_Line >0, maxList(low[1], _stp_line), minList(high[1], _stp_line));
		end;
	end;

end;

_DEBUG_INFO =text(

		 _qc_avg, ",",
		 _qc_stdw, ",",
		 _range_L, ",",
		 _range_LL, ",",
		 _range_S, ",",
		 _range_SS, ",",

		 _LS_ratio, ",",

		 _switch_L, ",",
		 _switch_S, ",",
		 _switch_DL, ",",
		 _switch_DS, ",",
		 _switch_mk_L, ",",
		 _switch_mk_S, ",",
		 _switch_opd_L, ",",
		 _switch_opd_S, ",",
		 _switch_Rev2L, ",",
		 _switch_Rev2S
		 
);




